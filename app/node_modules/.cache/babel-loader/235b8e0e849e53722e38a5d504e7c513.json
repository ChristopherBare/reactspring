{"ast":null,"code":"import _objectSpread from \"/home/christopher/Desktop/react-spring/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/christopher/Desktop/react-spring/app/src/GroupEdit.js\";\nimport React, { Component } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport { Button, Container, Form, FormGroup, Input, Label } from 'reactstrap';\nimport AppNavbar from './AppNavbar';\nimport { instanceOf } from \"prop-types\";\nimport { Cookies, withCookies } from 'react-cookie';\n\nclass GroupEdit extends Component {\n  constructor(props) {\n    super(props);\n    this.emptyItem = {\n      name: '',\n      address: '',\n      city: '',\n      stateOrProvince: '',\n      country: '',\n      postalCode: ''\n    };\n    const cookies = props.cookies;\n    this.state = {\n      item: this.emptyItem,\n      csrfToken: cookies.get('XSRF-TOKEN')\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  async componentDidMount() {\n    if (this.props.match.params.id !== 'new') {\n      try {\n        const group = await (await fetch(\"/api/group/\".concat(this.props.match.params.id), {\n          credentials: 'include'\n        })).json();\n        this.setState({\n          item: group\n        });\n      } catch (error) {\n        this.props.history.push('/');\n      }\n    }\n  }\n\n  handleChange(event) {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n\n    let item = _objectSpread({}, this.state.item);\n\n    item[name] = value;\n    this.setState({\n      item\n    });\n  }\n\n  async handleSubmit(event) {\n    event.preventDefault();\n    const _this$state = this.state,\n          item = _this$state.item,\n          csrfToken = _this$state.csrfToken;\n    await fetch(\"/api/group/\".concat(item.id || ''), {\n      method: item.id ? 'PUT' : 'POST',\n      headers: {\n        'X-XSRF-TOKEN': this.state.csrfToken,\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(item),\n      credentials: 'include'\n    });\n    this.props.history.push('/groups');\n  }\n\n  render() {\n    const item = this.state.item;\n    const title = React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, item.id ? 'Edit Group' : 'Add Group');\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(AppNavbar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }), React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, title, React.createElement(Form, {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(Label, {\n      for: \"name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, \"Name\"), React.createElement(Input, {\n      type: \"text\",\n      name: \"name\",\n      id: \"name\",\n      value: item.name || '',\n      onChange: this.handleChange,\n      autoComplete: \"name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    })), React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(Label, {\n      for: \"address\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, \"Address\"), React.createElement(Input, {\n      type: \"text\",\n      name: \"address\",\n      id: \"address\",\n      value: item.address || '',\n      onChange: this.handleChange,\n      autoComplete: \"address-level1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    })), React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(Label, {\n      for: \"city\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, \"City\"), React.createElement(Input, {\n      type: \"text\",\n      name: \"city\",\n      id: \"city\",\n      value: item.city || '',\n      onChange: this.handleChange,\n      autoComplete: \"address-level1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(FormGroup, {\n      className: \"col-md-4 mb-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(Label, {\n      for: \"stateOrProvince\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, \"State/Province\"), React.createElement(Input, {\n      type: \"text\",\n      name: \"stateOrProvince\",\n      id: \"stateOrProvince\",\n      value: item.stateOrProvince || '',\n      onChange: this.handleChange,\n      autoComplete: \"address-level1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    })), React.createElement(FormGroup, {\n      className: \"col-md-5 mb-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(Label, {\n      for: \"country\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, \"Country\"), React.createElement(Input, {\n      type: \"text\",\n      name: \"country\",\n      id: \"country\",\n      value: item.country || '',\n      onChange: this.handleChange,\n      autoComplete: \"address-level1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    })), React.createElement(FormGroup, {\n      className: \"col-md-3 mb-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(Label, {\n      for: \"country\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, \"Postal Code\"), React.createElement(Input, {\n      type: \"text\",\n      name: \"postalCode\",\n      id: \"postalCode\",\n      value: item.postalCode || '',\n      onChange: this.handleChange,\n      autoComplete: \"address-level1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }))), React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(Button, {\n      color: \"primary\",\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, \"Save\"), ' ', React.createElement(Button, {\n      color: \"secondary\",\n      tag: Link,\n      to: \"/groups\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, \"Cancel\")))));\n  }\n\n}\n\nGroupEdit.propTypes = {\n  cookies: instanceOf(Cookies).isRequired\n};\nexport default withCookies(withRouter(GroupEdit));","map":{"version":3,"sources":["/home/christopher/Desktop/react-spring/app/src/GroupEdit.js"],"names":["React","Component","Link","withRouter","Button","Container","Form","FormGroup","Input","Label","AppNavbar","instanceOf","Cookies","withCookies","GroupEdit","constructor","props","emptyItem","name","address","city","stateOrProvince","country","postalCode","cookies","state","item","csrfToken","get","handleChange","bind","handleSubmit","componentDidMount","match","params","id","group","fetch","credentials","json","setState","error","history","push","event","target","value","preventDefault","method","headers","body","JSON","stringify","render","title","propTypes","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport { Button, Container, Form, FormGroup, Input, Label } from 'reactstrap';\nimport AppNavbar from './AppNavbar';\nimport {instanceOf} from \"prop-types\";\nimport { Cookies, withCookies } from 'react-cookie';\n\nclass GroupEdit extends Component {\n    static propTypes = {\n        cookies: instanceOf(Cookies).isRequired\n    };\n\n    emptyItem = {\n        name: '',\n        address: '',\n        city: '',\n        stateOrProvince: '',\n        country: '',\n        postalCode: ''\n    };\n\n    constructor(props) {\n        super(props);\n        const {cookies} = props;\n        this.state = {\n            item: this.emptyItem,\n            csrfToken: cookies.get('XSRF-TOKEN')\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    async componentDidMount() {\n        if (this.props.match.params.id !== 'new') {\n            try {\n                const group = await (await fetch(`/api/group/${this.props.match.params.id}`, {credentials: 'include'})).json();\n                this.setState({item: group});\n            } catch (error) {\n                this.props.history.push('/');\n            }\n        }\n    }\n\n    handleChange(event) {\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n        let item = {...this.state.item};\n        item[name] = value;\n        this.setState({item});\n    }\n\n    async handleSubmit(event) {\n        event.preventDefault();\n        const {item, csrfToken} = this.state;\n\n        await fetch(`/api/group/${item.id || ''}`, {\n            method: (item.id) ? 'PUT' : 'POST',\n            headers: {\n                'X-XSRF-TOKEN': this.state.csrfToken,\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(item),\n            credentials: 'include'\n        });\n        this.props.history.push('/groups');\n    }\n\n    render() {\n        const {item} = this.state;\n        const title = <h2>{item.id ? 'Edit Group' : 'Add Group'}</h2>;\n\n        return <div>\n            <AppNavbar/>\n            <Container>\n                {title}\n                <Form onSubmit={this.handleSubmit}>\n                    <FormGroup>\n                        <Label for=\"name\">Name</Label>\n                        <Input type=\"text\" name=\"name\" id=\"name\" value={item.name || ''}\n                               onChange={this.handleChange} autoComplete=\"name\"/>\n                    </FormGroup>\n                    <FormGroup>\n                        <Label for=\"address\">Address</Label>\n                        <Input type=\"text\" name=\"address\" id=\"address\" value={item.address || ''}\n                               onChange={this.handleChange} autoComplete=\"address-level1\"/>\n                    </FormGroup>\n                    <FormGroup>\n                        <Label for=\"city\">City</Label>\n                        <Input type=\"text\" name=\"city\" id=\"city\" value={item.city || ''}\n                               onChange={this.handleChange} autoComplete=\"address-level1\"/>\n                    </FormGroup>\n                    <div className=\"row\">\n                        <FormGroup className=\"col-md-4 mb-3\">\n                            <Label for=\"stateOrProvince\">State/Province</Label>\n                            <Input type=\"text\" name=\"stateOrProvince\" id=\"stateOrProvince\" value={item.stateOrProvince || ''}\n                                   onChange={this.handleChange} autoComplete=\"address-level1\"/>\n                        </FormGroup>\n                        <FormGroup className=\"col-md-5 mb-3\">\n                            <Label for=\"country\">Country</Label>\n                            <Input type=\"text\" name=\"country\" id=\"country\" value={item.country || ''}\n                                   onChange={this.handleChange} autoComplete=\"address-level1\"/>\n                        </FormGroup>\n                        <FormGroup className=\"col-md-3 mb-3\">\n                            <Label for=\"country\">Postal Code</Label>\n                            <Input type=\"text\" name=\"postalCode\" id=\"postalCode\" value={item.postalCode || ''}\n                                   onChange={this.handleChange} autoComplete=\"address-level1\"/>\n                        </FormGroup>\n                    </div>\n                    <FormGroup>\n                        <Button color=\"primary\" type=\"submit\">Save</Button>{' '}\n                        <Button color=\"secondary\" tag={Link} to=\"/groups\">Cancel</Button>\n                    </FormGroup>\n                </Form>\n            </Container>\n        </div>\n    }\n}\n\nexport default  withCookies(withRouter(GroupEdit));"]},"metadata":{},"sourceType":"module"}